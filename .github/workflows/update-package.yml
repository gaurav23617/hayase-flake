name: Update Package

on:
  workflow_call:
    inputs:
      current_version:
        required: true
        type: string
      latest_version:
        required: true
        type: string
      update_method:
        required: false
        type: string
        default: "pr"

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Update package files
        run: |
          echo "🔄 Updating from ${{ inputs.current_version }} to ${{ inputs.latest_version }}"

          # Fetch new hash using nix-prefetch-url (more reliable than nix-prefetch-github)
          echo "📦 Fetching new source hash..."
          TARBALL_URL="https://github.com/ThaUnknown/miru/archive/refs/tags/v${{ inputs.latest_version }}.tar.gz"
          NEW_HASH=$(nix-prefetch-url --unpack "$TARBALL_URL")
          echo "✅ New hash: $NEW_HASH"

          # Update package.nix
          echo "🔧 Updating package.nix..."
          sed -i "s/version = \".*\"/version = \"${{ inputs.latest_version }}\"/" package.nix
          sed -i "s/hash = \".*\"/hash = \"$NEW_HASH\"/" package.nix

          # Update version.json (if it exists)
          if [ -f version.json ]; then
            echo "🔧 Updating version.json..."
            jq --arg version "${{ inputs.latest_version }}" \
               --arg hash "$NEW_HASH" \
               '.version = $version | .sha256 = $hash' \
               version.json > version.json.tmp && mv version.json.tmp version.json
          fi

          echo "✅ Package files updated successfully"

      - name: Fix pnpm dependencies hash
        run: |
          echo "🔍 Getting correct pnpm dependencies hash..."

          # Try to build to get the correct pnpm hash
          if ! nix build 2>&1 | tee /tmp/build.log; then
            echo "⚠️  Build failed (expected) - extracting pnpm hash..."
            
            # Extract the expected hash from build failure
            if grep -q "got:" /tmp/build.log; then
              NEW_PNPM_HASH=$(grep "got:" /tmp/build.log | tail -1 | sed 's/.*got: //')
              echo "✅ Found pnpm hash: $NEW_PNPM_HASH"
              
              # Update the hash in package.nix
              echo "🔄 Updating pnpm hash in package.nix..."
              sed -i "s/hash = \"sha256-.*\"/hash = \"$NEW_PNPM_HASH\"/" package.nix
              echo "✅ pnpm hash updated successfully"
            else
              echo "❌ Could not extract pnpm hash from build output"
              echo "📋 Build log:"
              cat /tmp/build.log
              exit 1
            fi
          else
            echo "✅ Build succeeded on first try - no pnpm hash update needed"
          fi

      - name: Test final build
        run: |
          echo "🧪 Testing final build..."
          if nix build; then
            echo "✅ Build successful! Package is ready"
          else
            echo "❌ Final build failed!"
            exit 1
          fi

      - name: Upload updated files
        uses: actions/upload-artifact@v4
        with:
          name: updated-files
          path: |
            package.nix
            version.json
          retention-days: 1
