name: Update Hayase

on:
  schedule:
    # Check for updates every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:
    # Allow manual trigger

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Check for new release
        id: check_release
        run: |
          # Get latest release from GitHub API
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/ThaUnknown/miru/releases/latest" | jq -r '.tag_name' | sed 's/^v//')
          CURRENT_VERSION=$(grep -o 'version = "[^"]*"' flake.nix | sed 's/version = "\(.*\)"/\1/')

          echo "Latest release: $LATEST_RELEASE"
          echo "Current version: $CURRENT_VERSION"

          if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ]; then
            echo "New version available: $LATEST_RELEASE"
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          else
            echo "No update needed"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Update flake
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          NEW_VERSION="${{ steps.check_release.outputs.new_version }}"

          # Update version in flake.nix
          sed -i "s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" flake.nix

          # Function to get hash for a URL using nix-prefetch-url
          get_hash() {
            local url="$1"
            local platform="$2"
            
            echo "Fetching $platform hash for: $url"
            
            # Check if URL exists first
            if ! curl --head --silent --fail "$url" > /dev/null; then
              echo "✗ $platform asset not found: $url"
              return 1
            fi
            
            # Use nix-prefetch-url to get hash
            local hash
            hash=$(nix-prefetch-url --type sha256 "$url" 2>/dev/null)
            local exit_code=$?
            
            if [[ $exit_code -eq 0 && -n "$hash" ]]; then
              # Convert to sri format if needed
              if [[ $hash =~ ^[a-f0-9]{64}$ ]]; then
                hash="sha256-$(echo -n "$hash" | xxd -r -p | base64 -w 0)"
              fi
              echo "✓ Got $platform hash: $hash"
              echo "$hash"
              return 0
            fi
            
            echo "✗ Failed to get $platform hash"
            return 1
          }

          # Get URLs for both platforms
          X86_64_URL="https://github.com/ThaUnknown/miru/releases/download/v${NEW_VERSION}/linux-Hayase-${NEW_VERSION}.AppImage"
          AARCH64_URL="https://github.com/ThaUnknown/miru/releases/download/v${NEW_VERSION}/linux-arm64-Hayase-${NEW_VERSION}.AppImage"

          # Initialize success flags
          X86_64_SUCCESS=0
          AARCH64_SUCCESS=0

          # Get hashes with better error handling
          echo "Attempting to fetch x86_64 hash..."
          if X86_64_HASH=$(get_hash "$X86_64_URL" "x86_64"); then
            X86_64_SUCCESS=1
            echo "x86_64 hash: $X86_64_HASH"
          else
            echo "Failed to get x86_64 hash, using placeholder"
            X86_64_HASH="sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
          fi

          echo "Attempting to fetch aarch64 hash..."
          if AARCH64_HASH=$(get_hash "$AARCH64_URL" "aarch64"); then
            AARCH64_SUCCESS=1
            echo "aarch64 hash: $AARCH64_HASH"
          else
            echo "Failed to get aarch64 hash, using placeholder"
            AARCH64_HASH="sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
          fi

          # Update hashes in flake.nix using more robust sed commands
          echo "Updating x86_64 hash..."
          sed -i '/x86_64-linux = {/,/};/{
            s/hash = "[^"]*"/hash = "'"$X86_64_HASH"'"/
          }' flake.nix

          echo "Updating aarch64 hash..."
          sed -i '/aarch64-linux = {/,/};/{
            s/hash = "[^"]*"/hash = "'"$AARCH64_HASH"'"/
          }' flake.nix

          echo "Updated flake.nix with:"
          echo "  Version: $NEW_VERSION"
          echo "  x86_64 hash: $X86_64_HASH"
          echo "  aarch64 hash: $AARCH64_HASH"

          # Verify the changes were made
          echo "Verifying changes in flake.nix:"
          grep -A 5 -B 5 "version = " flake.nix
          grep -A 3 "x86_64-linux = {" flake.nix
          grep -A 3 "aarch64-linux = {" flake.nix

      - name: Test flake build
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          echo "Testing flake build..."
          # Try to build the flake to ensure it's valid
          nix build .#default --no-link --print-build-logs || {
            echo "Build failed, but continuing with update"
            echo "This might be due to placeholder hashes"
          }

      - name: Update flake.lock
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          echo "Updating flake.lock..."
          nix flake update --commit-lock-file

      - name: Commit and push changes
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git add flake.nix flake.lock
          git commit -m "Update Hayase to v${{ steps.check_release.outputs.new_version }}"
          git push

      - name: Create release
        if: steps.check_release.outputs.needs_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.check_release.outputs.new_version }}"
          name: "Hayase v${{ steps.check_release.outputs.new_version }}"
          body: |
            Automatic update to Hayase v${{ steps.check_release.outputs.new_version }}

            This release automatically tracks the upstream Hayase releases.

            **Installation:**
            ```bash
            nix run github:${{ github.repository }}
            ```

            **Or add to your configuration:**
            ```nix
            {
              inputs.hayase.url = "github:${{ github.repository }}";
              # ... rest of your config
            }
            ```
          draft: false
          prerelease: false
