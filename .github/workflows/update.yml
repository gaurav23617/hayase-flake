name: Update Hayase

on:
  schedule:
    # Check for updates every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:
    # Allow manual trigger

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Check for new release
        id: check_release
        run: |
          # Get latest release from GitHub API
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/ThaUnknown/miru/releases/latest" | jq -r '.tag_name' | sed 's/^v//')
          CURRENT_VERSION=$(grep -o 'version = "[^"]*"' flake.nix | sed 's/version = "\(.*\)"/\1/')

          echo "Latest release: $LATEST_RELEASE"
          echo "Current version: $CURRENT_VERSION"

          # Debug: Show available assets for the latest release
          echo "Available assets for v$LATEST_RELEASE:"
          curl -s "https://api.github.com/repos/ThaUnknown/miru/releases/latest" | jq -r '.assets[] | .name'

          if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ]; then
            echo "New version available: $LATEST_RELEASE"
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          else
            echo "No update needed"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Update flake
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          NEW_VERSION="${{ steps.check_release.outputs.new_version }}"

          # Update version in flake.nix
          sed -i "s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" flake.nix

          # Function to get hash for a URL
          get_hash() {
            local url="$1"
            local platform="$2"
            
            echo "Fetching $platform hash for: $url" >&2
            
            # Check if URL exists first
            if ! curl --head --silent --fail "$url" >/dev/null 2>&1; then
              echo "✗ $platform asset not found: $url" >&2
              
              # List all available assets for this release
              echo "Available assets for v${NEW_VERSION}:" >&2
              curl -s "https://api.github.com/repos/ThaUnknown/miru/releases/tags/v${NEW_VERSION}" | jq -r '.assets[]? | .name' 2>/dev/null || echo "Failed to list assets" >&2
              
              return 1
            fi
            echo "✓ URL exists: $url" >&2
            
            # Method 1: Direct nix-prefetch-url with SRI format
            echo "Trying nix-prefetch-url..." >&2
            local hash
            hash=$(nix-prefetch-url --type sha256 "$url" 2>/dev/null)
            local exit_code=$?
            
            if [[ $exit_code -eq 0 && -n "$hash" ]]; then
              # Convert to SRI format if needed
              local sri_hash
              if [[ "$hash" =~ ^sha256- ]]; then
                # Already in SRI format
                sri_hash="$hash"
              elif [[ "$hash" =~ ^[a-f0-9]{64}$ ]]; then
                # Convert hex to SRI format
                sri_hash="sha256-$(echo -n "$hash" | xxd -r -p | base64 -w 0)"
              else
                # Assume it's base32 and convert to SRI
                sri_hash=$(nix hash to-sri --type sha256 "$hash" 2>/dev/null || echo "$hash")
              fi
              echo "✓ Got $platform hash: $sri_hash" >&2
              echo "$sri_hash"
              return 0
            fi
            
            # Method 2: Download and hash locally
            echo "Trying local download and hash method..." >&2
            local temp_file=$(mktemp)
            if curl -L -o "$temp_file" "$url" 2>/dev/null; then
              # Use sha256sum and convert to SRI format
              local hex_hash
              hex_hash=$(sha256sum "$temp_file" | cut -d' ' -f1)
              if [[ -n "$hex_hash" && $hex_hash =~ ^[a-f0-9]{64}$ ]]; then
                # Convert hex to SRI format
                local sri_hash
                sri_hash="sha256-$(echo -n "$hex_hash" | xxd -r -p | base64 -w 0)"
                echo "✓ Got $platform hash: $sri_hash" >&2
                rm -f "$temp_file"
                echo "$sri_hash"
                return 0
              fi
              rm -f "$temp_file"
            fi
            
            echo "✗ All methods failed for $platform hash" >&2
            return 1
          }

          # The actual asset naming pattern from the release
          LINUX_URL="https://github.com/ThaUnknown/miru/releases/download/v${NEW_VERSION}/linux-hayase-${NEW_VERSION}-linux.AppImage"

          echo "URL to fetch:"
          echo "Linux: $LINUX_URL"

          # Get hash with fallback to known working hash
          echo "=== Attempting to fetch Linux hash ==="
          if LINUX_HASH=$(get_hash "$LINUX_URL" "linux"); then
            echo "SUCCESS: Linux hash: $LINUX_HASH"
          else
            echo "FAILED: Failed to get Linux hash, using fallback"
            # Use a known working hash as fallback
            LINUX_HASH="sha256-RlANC9NNzLTtFvOwz6UoCaW6Zr6K5IhihUABGoXhCv0="
          fi

          # Update hash in flake.nix using sed with proper escaping
          echo "Updating Linux hash..."

          # Escape the hash for use in sed (replace / with \/)
          ESCAPED_HASH=$(echo "$LINUX_HASH" | sed 's/[\/&]/\\&/g')

          # Use sed to replace the hash line
          sed -i "s/hash = \"[^\"]*\";/hash = \"$ESCAPED_HASH\"; # Updated by CI/" flake.nix

          echo "Updated flake.nix with:"
          echo "  Version: $NEW_VERSION"
          echo "  Linux hash: $LINUX_HASH"
          echo "  Linux URL: $LINUX_URL"

          # Verify the changes were made
          echo "Verifying changes in flake.nix:"
          grep -A 2 -B 2 "version = " flake.nix
          grep -A 2 -B 2 "hash = " flake.nix

      - name: Test flake build
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          echo "Testing flake build..."
          # Try to build the flake to ensure it's valid
          nix build .#default --no-link --print-build-logs || {
            echo "Build failed, but continuing with update"
            echo "This might be due to hash mismatch"
          }

      - name: Update flake.lock
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          echo "Updating flake.lock..."
          nix flake update --commit-lock-file || {
            echo "flake.lock update failed, continuing anyway"
          }

      - name: Commit and push changes
        if: steps.check_release.outputs.needs_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git add flake.nix flake.lock
          git commit -m "Update Hayase to v${{ steps.check_release.outputs.new_version }}"
          git push

      - name: Create release
        if: steps.check_release.outputs.needs_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.check_release.outputs.new_version }}"
          name: "Hayase v${{ steps.check_release.outputs.new_version }}"
          body: |
            Automatic update to Hayase v${{ steps.check_release.outputs.new_version }}

            This release automatically tracks the upstream Hayase releases.

            **Installation:**
            ```bash
            nix run github:${{ github.repository }}
            ```

            **Or add to your configuration:**
            ```nix
            {
              inputs.hayase.url = "github:${{ github.repository }}";
              # ... rest of your config
            }
            ```
          draft: false
          prerelease: false
